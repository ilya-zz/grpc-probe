// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: api/api.proto

package api

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import bytes "bytes"

import strings "strings"
import reflect "reflect"
import github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type Hello struct {
	Id   int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Msg  string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data []byte `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *Hello) Reset()      { *m = Hello{} }
func (*Hello) ProtoMessage() {}
func (*Hello) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_853306e992fe3357, []int{0}
}
func (m *Hello) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Hello) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Hello.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Hello) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Hello.Merge(dst, src)
}
func (m *Hello) XXX_Size() int {
	return m.Size()
}
func (m *Hello) XXX_DiscardUnknown() {
	xxx_messageInfo_Hello.DiscardUnknown(m)
}

var xxx_messageInfo_Hello proto.InternalMessageInfo

func (m *Hello) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Hello) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *Hello) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type Status struct {
	Tsid int64 `protobuf:"varint,1,opt,name=tsid,proto3" json:"tsid,omitempty"`
}

func (m *Status) Reset()      { *m = Status{} }
func (*Status) ProtoMessage() {}
func (*Status) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_853306e992fe3357, []int{1}
}
func (m *Status) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Status) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Status.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Status) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Status.Merge(dst, src)
}
func (m *Status) XXX_Size() int {
	return m.Size()
}
func (m *Status) XXX_DiscardUnknown() {
	xxx_messageInfo_Status.DiscardUnknown(m)
}

var xxx_messageInfo_Status proto.InternalMessageInfo

func (m *Status) GetTsid() int64 {
	if m != nil {
		return m.Tsid
	}
	return 0
}

type ToTranslate struct {
	Id   int64  `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	Text string `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
}

func (m *ToTranslate) Reset()      { *m = ToTranslate{} }
func (*ToTranslate) ProtoMessage() {}
func (*ToTranslate) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_853306e992fe3357, []int{2}
}
func (m *ToTranslate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ToTranslate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ToTranslate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ToTranslate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ToTranslate.Merge(dst, src)
}
func (m *ToTranslate) XXX_Size() int {
	return m.Size()
}
func (m *ToTranslate) XXX_DiscardUnknown() {
	xxx_messageInfo_ToTranslate.DiscardUnknown(m)
}

var xxx_messageInfo_ToTranslate proto.InternalMessageInfo

func (m *ToTranslate) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *ToTranslate) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

type TranslateResult struct {
	Id      int64             `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	Results map[string]string `protobuf:"bytes,1,rep,name=results" json:"results,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *TranslateResult) Reset()      { *m = TranslateResult{} }
func (*TranslateResult) ProtoMessage() {}
func (*TranslateResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_853306e992fe3357, []int{3}
}
func (m *TranslateResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TranslateResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TranslateResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *TranslateResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TranslateResult.Merge(dst, src)
}
func (m *TranslateResult) XXX_Size() int {
	return m.Size()
}
func (m *TranslateResult) XXX_DiscardUnknown() {
	xxx_messageInfo_TranslateResult.DiscardUnknown(m)
}

var xxx_messageInfo_TranslateResult proto.InternalMessageInfo

func (m *TranslateResult) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *TranslateResult) GetResults() map[string]string {
	if m != nil {
		return m.Results
	}
	return nil
}

type RecordMessage struct {
	Message []byte `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (m *RecordMessage) Reset()      { *m = RecordMessage{} }
func (*RecordMessage) ProtoMessage() {}
func (*RecordMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_853306e992fe3357, []int{4}
}
func (m *RecordMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RecordMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RecordMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *RecordMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RecordMessage.Merge(dst, src)
}
func (m *RecordMessage) XXX_Size() int {
	return m.Size()
}
func (m *RecordMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_RecordMessage.DiscardUnknown(m)
}

var xxx_messageInfo_RecordMessage proto.InternalMessageInfo

func (m *RecordMessage) GetMessage() []byte {
	if m != nil {
		return m.Message
	}
	return nil
}

type StoreSummary struct {
	Written int64 `protobuf:"varint,1,opt,name=written,proto3" json:"written,omitempty"`
}

func (m *StoreSummary) Reset()      { *m = StoreSummary{} }
func (*StoreSummary) ProtoMessage() {}
func (*StoreSummary) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_853306e992fe3357, []int{5}
}
func (m *StoreSummary) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StoreSummary) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StoreSummary.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *StoreSummary) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StoreSummary.Merge(dst, src)
}
func (m *StoreSummary) XXX_Size() int {
	return m.Size()
}
func (m *StoreSummary) XXX_DiscardUnknown() {
	xxx_messageInfo_StoreSummary.DiscardUnknown(m)
}

var xxx_messageInfo_StoreSummary proto.InternalMessageInfo

func (m *StoreSummary) GetWritten() int64 {
	if m != nil {
		return m.Written
	}
	return 0
}

func init() {
	proto.RegisterType((*Hello)(nil), "api.Hello")
	proto.RegisterType((*Status)(nil), "api.Status")
	proto.RegisterType((*ToTranslate)(nil), "api.ToTranslate")
	proto.RegisterType((*TranslateResult)(nil), "api.TranslateResult")
	proto.RegisterMapType((map[string]string)(nil), "api.TranslateResult.ResultsEntry")
	proto.RegisterType((*RecordMessage)(nil), "api.RecordMessage")
	proto.RegisterType((*StoreSummary)(nil), "api.StoreSummary")
}
func (this *Hello) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Hello)
	if !ok {
		that2, ok := that.(Hello)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.Msg != that1.Msg {
		return false
	}
	if !bytes.Equal(this.Data, that1.Data) {
		return false
	}
	return true
}
func (this *Status) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Status)
	if !ok {
		that2, ok := that.(Status)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Tsid != that1.Tsid {
		return false
	}
	return true
}
func (this *ToTranslate) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ToTranslate)
	if !ok {
		that2, ok := that.(ToTranslate)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.Text != that1.Text {
		return false
	}
	return true
}
func (this *TranslateResult) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TranslateResult)
	if !ok {
		that2, ok := that.(TranslateResult)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if len(this.Results) != len(that1.Results) {
		return false
	}
	for i := range this.Results {
		if this.Results[i] != that1.Results[i] {
			return false
		}
	}
	return true
}
func (this *RecordMessage) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RecordMessage)
	if !ok {
		that2, ok := that.(RecordMessage)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.Message, that1.Message) {
		return false
	}
	return true
}
func (this *StoreSummary) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StoreSummary)
	if !ok {
		that2, ok := that.(StoreSummary)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Written != that1.Written {
		return false
	}
	return true
}
func (this *Hello) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&api.Hello{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "Msg: "+fmt.Sprintf("%#v", this.Msg)+",\n")
	s = append(s, "Data: "+fmt.Sprintf("%#v", this.Data)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Status) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&api.Status{")
	s = append(s, "Tsid: "+fmt.Sprintf("%#v", this.Tsid)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ToTranslate) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&api.ToTranslate{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "Text: "+fmt.Sprintf("%#v", this.Text)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TranslateResult) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&api.TranslateResult{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	keysForResults := make([]string, 0, len(this.Results))
	for k, _ := range this.Results {
		keysForResults = append(keysForResults, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForResults)
	mapStringForResults := "map[string]string{"
	for _, k := range keysForResults {
		mapStringForResults += fmt.Sprintf("%#v: %#v,", k, this.Results[k])
	}
	mapStringForResults += "}"
	if this.Results != nil {
		s = append(s, "Results: "+mapStringForResults+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RecordMessage) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&api.RecordMessage{")
	s = append(s, "Message: "+fmt.Sprintf("%#v", this.Message)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *StoreSummary) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&api.StoreSummary{")
	s = append(s, "Written: "+fmt.Sprintf("%#v", this.Written)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringApi(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// WelcomeClient is the client API for Welcome service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type WelcomeClient interface {
	Hi(ctx context.Context, in *Hello, opts ...grpc.CallOption) (Welcome_HiClient, error)
	Translate(ctx context.Context, opts ...grpc.CallOption) (Welcome_TranslateClient, error)
	Store(ctx context.Context, opts ...grpc.CallOption) (Welcome_StoreClient, error)
}

type welcomeClient struct {
	cc *grpc.ClientConn
}

func NewWelcomeClient(cc *grpc.ClientConn) WelcomeClient {
	return &welcomeClient{cc}
}

func (c *welcomeClient) Hi(ctx context.Context, in *Hello, opts ...grpc.CallOption) (Welcome_HiClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Welcome_serviceDesc.Streams[0], "/api.Welcome/Hi", opts...)
	if err != nil {
		return nil, err
	}
	x := &welcomeHiClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Welcome_HiClient interface {
	Recv() (*Status, error)
	grpc.ClientStream
}

type welcomeHiClient struct {
	grpc.ClientStream
}

func (x *welcomeHiClient) Recv() (*Status, error) {
	m := new(Status)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *welcomeClient) Translate(ctx context.Context, opts ...grpc.CallOption) (Welcome_TranslateClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Welcome_serviceDesc.Streams[1], "/api.Welcome/Translate", opts...)
	if err != nil {
		return nil, err
	}
	x := &welcomeTranslateClient{stream}
	return x, nil
}

type Welcome_TranslateClient interface {
	Send(*ToTranslate) error
	Recv() (*TranslateResult, error)
	grpc.ClientStream
}

type welcomeTranslateClient struct {
	grpc.ClientStream
}

func (x *welcomeTranslateClient) Send(m *ToTranslate) error {
	return x.ClientStream.SendMsg(m)
}

func (x *welcomeTranslateClient) Recv() (*TranslateResult, error) {
	m := new(TranslateResult)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *welcomeClient) Store(ctx context.Context, opts ...grpc.CallOption) (Welcome_StoreClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Welcome_serviceDesc.Streams[2], "/api.Welcome/Store", opts...)
	if err != nil {
		return nil, err
	}
	x := &welcomeStoreClient{stream}
	return x, nil
}

type Welcome_StoreClient interface {
	Send(*RecordMessage) error
	CloseAndRecv() (*StoreSummary, error)
	grpc.ClientStream
}

type welcomeStoreClient struct {
	grpc.ClientStream
}

func (x *welcomeStoreClient) Send(m *RecordMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *welcomeStoreClient) CloseAndRecv() (*StoreSummary, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(StoreSummary)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// WelcomeServer is the server API for Welcome service.
type WelcomeServer interface {
	Hi(*Hello, Welcome_HiServer) error
	Translate(Welcome_TranslateServer) error
	Store(Welcome_StoreServer) error
}

func RegisterWelcomeServer(s *grpc.Server, srv WelcomeServer) {
	s.RegisterService(&_Welcome_serviceDesc, srv)
}

func _Welcome_Hi_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Hello)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(WelcomeServer).Hi(m, &welcomeHiServer{stream})
}

type Welcome_HiServer interface {
	Send(*Status) error
	grpc.ServerStream
}

type welcomeHiServer struct {
	grpc.ServerStream
}

func (x *welcomeHiServer) Send(m *Status) error {
	return x.ServerStream.SendMsg(m)
}

func _Welcome_Translate_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(WelcomeServer).Translate(&welcomeTranslateServer{stream})
}

type Welcome_TranslateServer interface {
	Send(*TranslateResult) error
	Recv() (*ToTranslate, error)
	grpc.ServerStream
}

type welcomeTranslateServer struct {
	grpc.ServerStream
}

func (x *welcomeTranslateServer) Send(m *TranslateResult) error {
	return x.ServerStream.SendMsg(m)
}

func (x *welcomeTranslateServer) Recv() (*ToTranslate, error) {
	m := new(ToTranslate)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Welcome_Store_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(WelcomeServer).Store(&welcomeStoreServer{stream})
}

type Welcome_StoreServer interface {
	SendAndClose(*StoreSummary) error
	Recv() (*RecordMessage, error)
	grpc.ServerStream
}

type welcomeStoreServer struct {
	grpc.ServerStream
}

func (x *welcomeStoreServer) SendAndClose(m *StoreSummary) error {
	return x.ServerStream.SendMsg(m)
}

func (x *welcomeStoreServer) Recv() (*RecordMessage, error) {
	m := new(RecordMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Welcome_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.Welcome",
	HandlerType: (*WelcomeServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Hi",
			Handler:       _Welcome_Hi_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Translate",
			Handler:       _Welcome_Translate_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "Store",
			Handler:       _Welcome_Store_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "api/api.proto",
}

func (m *Hello) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Hello) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Id))
	}
	if len(m.Msg) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Msg)))
		i += copy(dAtA[i:], m.Msg)
	}
	if len(m.Data) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Data)))
		i += copy(dAtA[i:], m.Data)
	}
	return i, nil
}

func (m *Status) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Status) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Tsid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Tsid))
	}
	return i, nil
}

func (m *ToTranslate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ToTranslate) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Text) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Text)))
		i += copy(dAtA[i:], m.Text)
	}
	if m.Id != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Id))
	}
	return i, nil
}

func (m *TranslateResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TranslateResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Results) > 0 {
		for k, _ := range m.Results {
			dAtA[i] = 0xa
			i++
			v := m.Results[k]
			mapSize := 1 + len(k) + sovApi(uint64(len(k))) + 1 + len(v) + sovApi(uint64(len(v)))
			i = encodeVarintApi(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintApi(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintApi(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	if m.Id != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Id))
	}
	return i, nil
}

func (m *RecordMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RecordMessage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Message) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Message)))
		i += copy(dAtA[i:], m.Message)
	}
	return i, nil
}

func (m *StoreSummary) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StoreSummary) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Written != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Written))
	}
	return i, nil
}

func encodeVarintApi(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Hello) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovApi(uint64(m.Id))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *Status) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Tsid != 0 {
		n += 1 + sovApi(uint64(m.Tsid))
	}
	return n
}

func (m *ToTranslate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Text)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Id != 0 {
		n += 1 + sovApi(uint64(m.Id))
	}
	return n
}

func (m *TranslateResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Results) > 0 {
		for k, v := range m.Results {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovApi(uint64(len(k))) + 1 + len(v) + sovApi(uint64(len(v)))
			n += mapEntrySize + 1 + sovApi(uint64(mapEntrySize))
		}
	}
	if m.Id != 0 {
		n += 1 + sovApi(uint64(m.Id))
	}
	return n
}

func (m *RecordMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *StoreSummary) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Written != 0 {
		n += 1 + sovApi(uint64(m.Written))
	}
	return n
}

func sovApi(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozApi(x uint64) (n int) {
	return sovApi(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Hello) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Hello{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`Msg:` + fmt.Sprintf("%v", this.Msg) + `,`,
		`Data:` + fmt.Sprintf("%v", this.Data) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Status) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Status{`,
		`Tsid:` + fmt.Sprintf("%v", this.Tsid) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ToTranslate) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ToTranslate{`,
		`Text:` + fmt.Sprintf("%v", this.Text) + `,`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TranslateResult) String() string {
	if this == nil {
		return "nil"
	}
	keysForResults := make([]string, 0, len(this.Results))
	for k, _ := range this.Results {
		keysForResults = append(keysForResults, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForResults)
	mapStringForResults := "map[string]string{"
	for _, k := range keysForResults {
		mapStringForResults += fmt.Sprintf("%v: %v,", k, this.Results[k])
	}
	mapStringForResults += "}"
	s := strings.Join([]string{`&TranslateResult{`,
		`Results:` + mapStringForResults + `,`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RecordMessage) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RecordMessage{`,
		`Message:` + fmt.Sprintf("%v", this.Message) + `,`,
		`}`,
	}, "")
	return s
}
func (this *StoreSummary) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&StoreSummary{`,
		`Written:` + fmt.Sprintf("%v", this.Written) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringApi(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Hello) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Hello: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Hello: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Status) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Status: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Status: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tsid", wireType)
			}
			m.Tsid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Tsid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ToTranslate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ToTranslate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ToTranslate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Text", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Text = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TranslateResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TranslateResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TranslateResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Results", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Results == nil {
				m.Results = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthApi
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthApi
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipApi(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthApi
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Results[mapkey] = mapvalue
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RecordMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RecordMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RecordMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = append(m.Message[:0], dAtA[iNdEx:postIndex]...)
			if m.Message == nil {
				m.Message = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StoreSummary) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StoreSummary: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StoreSummary: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Written", wireType)
			}
			m.Written = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Written |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipApi(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowApi
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthApi
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowApi
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipApi(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthApi = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowApi   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("api/api.proto", fileDescriptor_api_853306e992fe3357) }

var fileDescriptor_api_853306e992fe3357 = []byte{
	// 408 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x92, 0xb1, 0xae, 0xd3, 0x30,
	0x14, 0x86, 0x73, 0x12, 0x7a, 0xab, 0x9e, 0xe6, 0xc2, 0xc5, 0xba, 0x43, 0x14, 0x21, 0x13, 0x32,
	0x85, 0xa5, 0x94, 0x0b, 0x12, 0xa8, 0x88, 0x05, 0x09, 0xa9, 0x0b, 0x8b, 0x5b, 0x89, 0xd9, 0x34,
	0x56, 0x15, 0x91, 0x34, 0x91, 0xed, 0x00, 0xdd, 0x78, 0x04, 0x16, 0x16, 0x9e, 0x80, 0x47, 0x61,
	0xec, 0xd8, 0x91, 0xa6, 0x0b, 0x63, 0x1f, 0x01, 0xc5, 0x49, 0x5a, 0xa8, 0xee, 0x94, 0xef, 0x28,
	0xbf, 0xfd, 0x9f, 0xff, 0x4f, 0xf0, 0x92, 0x17, 0xc9, 0x13, 0x5e, 0x24, 0xa3, 0x42, 0xe6, 0x3a,
	0x27, 0x0e, 0x2f, 0x92, 0xf0, 0x35, 0xf6, 0xa6, 0x22, 0x4d, 0x73, 0x72, 0x17, 0xed, 0x24, 0xf6,
	0x20, 0x80, 0xc8, 0x61, 0x76, 0x12, 0x93, 0x2b, 0x74, 0x32, 0xb5, 0xf4, 0xec, 0x00, 0xa2, 0x01,
	0xab, 0x91, 0x10, 0xbc, 0x13, 0x73, 0xcd, 0x3d, 0x27, 0x80, 0xc8, 0x65, 0x86, 0xc3, 0x07, 0x78,
	0x31, 0xd3, 0x5c, 0x97, 0xaa, 0x7e, 0xab, 0xd5, 0xf1, 0x06, 0xc3, 0xe1, 0x53, 0x1c, 0xce, 0xf3,
	0xb9, 0xe4, 0x2b, 0x95, 0x72, 0x2d, 0x8c, 0x44, 0x7c, 0xd1, 0x46, 0x32, 0x60, 0x86, 0x5b, 0x5b,
	0xbb, 0xb3, 0x0d, 0x7f, 0x00, 0xde, 0x3b, 0x9e, 0x60, 0x42, 0x95, 0xa9, 0x26, 0xaf, 0xb0, 0x2f,
	0x0d, 0x29, 0x0f, 0x02, 0x27, 0x1a, 0xde, 0x3c, 0x1a, 0xd5, 0x29, 0xce, 0x64, 0xa3, 0xe6, 0xa1,
	0xde, 0xae, 0xb4, 0x5c, 0xb3, 0xee, 0xc4, 0xb9, 0x81, 0x3f, 0x41, 0xf7, 0x5f, 0x61, 0x9d, 0xf3,
	0xa3, 0x58, 0xb7, 0x3b, 0xd5, 0x48, 0xae, 0xb1, 0xf7, 0x89, 0xa7, 0xa5, 0x68, 0xb3, 0x37, 0xc3,
	0xc4, 0x7e, 0x09, 0xe1, 0x63, 0xbc, 0x64, 0x62, 0x91, 0xcb, 0xf8, 0x9d, 0x50, 0x8a, 0x2f, 0x05,
	0xf1, 0xb0, 0x9f, 0x35, 0x68, 0x2e, 0x70, 0x59, 0x37, 0x86, 0x11, 0xba, 0x33, 0x9d, 0x4b, 0x31,
	0x2b, 0xb3, 0x8c, 0xcb, 0x75, 0xad, 0xfc, 0x2c, 0x13, 0xad, 0xc5, 0xaa, 0x6d, 0xa8, 0x1b, 0x6f,
	0xbe, 0x03, 0xf6, 0xdf, 0x8b, 0x74, 0x91, 0x67, 0x82, 0x3c, 0x44, 0x7b, 0x9a, 0x10, 0x34, 0xf1,
	0xcc, 0x67, 0xf1, 0x87, 0x86, 0x9b, 0x8e, 0xc7, 0x40, 0x5e, 0xe0, 0xe0, 0xd4, 0xe7, 0x55, 0x53,
	0xc3, 0xa9, 0x61, 0xff, 0xfa, 0xb6, 0x62, 0x22, 0x18, 0x03, 0x19, 0x63, 0xcf, 0xec, 0x43, 0x88,
	0x91, 0xfc, 0x17, 0xc3, 0xbf, 0xdf, 0x9a, 0x9c, 0xf6, 0x8d, 0xe0, 0xcd, 0xf3, 0xcd, 0x8e, 0x5a,
	0xdb, 0x1d, 0xb5, 0x0e, 0x3b, 0x0a, 0x5f, 0x2b, 0x0a, 0x3f, 0x2b, 0x0a, 0xbf, 0x2a, 0x0a, 0x9b,
	0x8a, 0xc2, 0xef, 0x8a, 0xc2, 0x9f, 0x8a, 0x5a, 0x87, 0x8a, 0xc2, 0xb7, 0x3d, 0xb5, 0x36, 0x7b,
	0x6a, 0x6d, 0xf7, 0xd4, 0xfa, 0x70, 0x61, 0xfe, 0xad, 0x67, 0x7f, 0x03, 0x00, 0x00, 0xff, 0xff,
	0xe6, 0x5a, 0x1b, 0x11, 0x6c, 0x02, 0x00, 0x00,
}
